-y = makeCacheMatrix(matrix(1:25, nrow = 5, ncol = 5))
-cacheSolve(y)
-y$get()
-solve(y$get())
-solve
-solve?
-b
-?solve()
-x <- y$get()
-solve(x)
-y = makeCacheMatrix(matrix(1:10, nrow = 2, ncol = 5))
-x <- y$get()
-x
-solve(x)
-y = makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
-x <- y$get()
-solve(x)
-cacheSplve(y)
-cacheSolve(y)
-cacheSolve(y)
-x = makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
-cacheSolve(x)
-source('C:/Users/Steve/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
-x <- makevector(1:1000)
-x <- makeVector(1:1000)
-cachemean(x)
-x.getmean
-x$getmean()
-x$setmean()
-x
-x$get()
-x$set(1:10)
-c$get
-x$get
-x$get()
-x$getmean()
-cachemean(x)
-x$getmean()
-cachemean(x)
-x$set(1:1000000)
-cachemean(x)
-cachemean(x)
-x$set(1:10000000)
-cachemean(x)
-cachemean(x)
-x$set(1:100000000)
-cachemean(x)
-cachemean(x)
-x$set(1:100)
-cachemean(x)
-cachemean(x)
-source('C:/Users/Steve/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
-source('C:/Users/Steve/datasciencecoursera/ProgrammingAssignment2/examplefile.R')
-y = MakeCacheMatrix(matrix(1:25, nrow = 5, ncol = 5))
-y = makeCacheMatrix(matrix(1:25, nrow = 5, ncol = 5))
-y$get()
-cacheSolve(y)
-source('C:/Users/Steve/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
-cacheSolve(y)
-y$get()
-y$getinv()
-View(cacheSolve)
-source('C:/Users/Steve/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
-y = makeCacheMatrix(matrix(1:25, nrow = 5, ncol = 5))
-cacheSolve(y)
-source('C:/Users/Steve/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
-y = makeCacheMatrix(matrix(1:25, nrow = 5, ncol = 5))
-cacheSolve(y)
-source('C:/Users/Steve/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
-y = makeCacheMatrix(matrix(1:25, nrow = 5, ncol = 5))
-cacheSolve(y)
-y$get()
-solve(y$get())
-solve
-solve?
-b
-?solve()
-x <- y$get()
-solve(x)
-y = makeCacheMatrix(matrix(1:10, nrow = 2, ncol = 5))
-x <- y$get()
-x
-solve(x)
-y = makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
-x <- y$get()
-solve(x)
-cacheSplve(y)
-cacheSolve(y)
-cacheSolve(y)
-x = makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
-cacheSolve(x)
-source('C:/Users/Steve/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
-x <- makevector(1:1000)
-x <- makeVector(1:1000)
-cachemean(x)
-x.getmean
-x$getmean()
-x$setmean()
-x
-x$get()
-x$set(1:10)
-c$get
-x$get
-x$get()
-x$getmean()
-cachemean(x)
-x$getmean()
-cachemean(x)
-x$set(1:1000000)
-cachemean(x)
-cachemean(x)
-x$set(1:10000000)
-cachemean(x)
-cachemean(x)
-x$set(1:100000000)
-cachemean(x)
-cachemean(x)
-x$set(1:100)
-cachemean(x)
-cachemean(x)
-source('C:/Users/Steve/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
-source('C:/Users/Steve/datasciencecoursera/ProgrammingAssignment2/examplefile.R')
-y = MakeCacheMatrix(matrix(1:25, nrow = 5, ncol = 5))
-y = makeCacheMatrix(matrix(1:25, nrow = 5, ncol = 5))
-y$get()
-cacheSolve(y)
-source('C:/Users/Steve/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
-cacheSolve(y)
-y$get()
-y$getinv()
-View(cacheSolve)
-source('C:/Users/Steve/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
-y = makeCacheMatrix(matrix(1:25, nrow = 5, ncol = 5))
-cacheSolve(y)
-source('C:/Users/Steve/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
-y = makeCacheMatrix(matrix(1:25, nrow = 5, ncol = 5))
-cacheSolve(y)
-source('C:/Users/Steve/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
-y = makeCacheMatrix(matrix(1:25, nrow = 5, ncol = 5))
-cacheSolve(y)
-y$get()
-solve(y$get())
-solve
-solve?
-b
-?solve()
-x <- y$get()
-solve(x)
-y = makeCacheMatrix(matrix(1:10, nrow = 2, ncol = 5))
-x <- y$get()
-x
-solve(x)
-y = makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
-x <- y$get()
-solve(x)
-cacheSplve(y)
-cacheSolve(y)
-cacheSolve(y)
-x = makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
-cacheSolve(x)
## MakeCacheMatrix and CacheMatrix enables storage of a matrix and caching of that matrix's inverse
## Usage:
##  x = makeCacheMatrix(matrix(rnorm(16), nrow = 4, ncol = 4))  ## initialize and load the matrix
##  x$set(matrix(rnorm(16), nrow = 4, ncol = 4))  ## set the value of the matrix
##  cacheSolve(x)  ## caches and returns inverse matrix
## makeCacheMatrix sets up a matrix with built in functions to set and get the matrix as well
## as a cache of the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
iv <- NULL
set <- function(y) {
x <<- y
iv <<- NULL
}
get <- function() x
setinv <- function(inv) iv <<- inv
getinv <- function () iv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
##cacheSolve accepts an instance of makeCacheMatrix and detects if the inverse has
## already been computed.  If the inverse exusts then it returns the cached result.
## Otherwise the function calculates and caches the inverse matrix.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
iv <- x$getinv()
if(!is.null(iv)) {
message("getting cached data")
return(iv)
}
data <- x$get()
inv <- solve(data)
x$setinv(inv)
inv
}
## MakeCacheMatrix and CacheMatrix enables storage of a matrix and caching of that matrix's inverse
## Usage:
##  x = makeCacheMatrix(matrix(rnorm(16), nrow = 4, ncol = 4))  ## initialize and load the matrix
##  x$set(matrix(rnorm(16), nrow = 4, ncol = 4))  ## set the value of the matrix
##  cacheSolve(x)  ## caches and returns inverse matrix
## makeCacheMatrix sets up a matrix with built in functions to set and get the matrix as well
## as a cache of the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
iv <- NULL
set <- function(y) {
x <<- y
iv <<- NULL
}
get <- function() x
setinv <- function(inv) iv <<- inv
getinv <- function () iv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
##cacheSolve accepts an instance of makeCacheMatrix and detects if the inverse has
## already been computed.  If the inverse exusts then it returns the cached result.
## Otherwise the function calculates and caches the inverse matrix.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
iv <- x$getinv()
if(!is.null(iv)) {
message("getting cached data")
return(iv)
}
data <- x$get()
inv <- solve(data)
x$setinv(inv)
inv
}
library(datasets)
boxplot(iris$Sepal.Length ~
iris$Species,
ylab="Sepal Length",
xlab="Species",
main="Sepal Length by
Species in Iris")
data(mtcars)
mcars
data(mtcars)
mtcars
data(mtcars)
mtcars
par(mcol=c(1,3)
hist(mtcars$wt)
hist(mtcars$wt)
data(mtcars)
mtcars
par(mcol=c(1,3)
hist(mtcars$wt)
data(mtcars)
mtcars
par(mcol=c(1,3)
hist(mtcars$wt)
hist(mtcars$mpg)
ata(mtcars)
mtcars
par(mcol=c(1,3)
hist(mtcars$wt)
hist(mtcars$mpg)
data(mtcars)
mtcars
par(mcol=c(1,3)
hist(mtcars$wt)
hist(mtcars$mpg)
hist(mtcars$disp)
data(mtcars)
par(mcol=c(1,1)
hist(mtcars$wt)
hist(mtcars$mpg)
hist(mtcars$disp)
plot(mtcars$disp~mtcars$disp)
main="MPG vs.Displacement",
xlab="Displacement(cu in)",
ylab="Miles Per Gallon",
data(mtcars)
par(mcol=c(1,1)
hist(mtcars$wt)
hist(mtcars$mpg)
hist(mtcars$disp)
png(sampleplot.png", width-480,height=480")
plot(mtcars$disp~mtcars$disp)
main="MPG vs.Displacement",
xlab="Displacement(cu in)",
ylab="Miles Per Gallon",
pch=16
col="grey"
xlim=c(100,500)
ylim=c(10,35)
data(mtcars)
par(mcol=c(1,1)
hist(mtcars$wt)
hist(mtcars$mpg)
hist(mtcars$disp)
png(sampleplot.png", width-480,height=480")
plot(mtcars$disp~mtcars$disp)
main="MPG vs.Displacement",
xlab="Displacement(cu in)",
ylab="Miles Per Gallon",
pch=16
col="grey"
xlim=c(100,500)
ylim=c(10,35)
data(mtcars)
par(mcol=c(1,1)
hist(mtcars$wt)
hist(mtcars$mpg)
hist(mtcars$disp)
png(sampleplot.png", width-480,height=480")
plot(mtcars$disp~mtcars$disp)
main="MPG vs.Displacement",
xlab="Displacement(cu in)",
ylab="Miles Per Gallon",
pch=16
col="grey"
xlim=c(100,500)
ylim=c(10,35)
data(mtcars)
par(mcol=c(1,1)
hist(mtcars$wt)
hist(mtcars$mpg)
hist(mtcars$disp)
png(sampleplot.png", width-480,height=480")
plot(mtcars$disp~mtcars$disp)
main="MPG vs.Displacement",
xlab="Displacement(cu in)",
ylab="Miles Per Gallon",
pch=16
col="grey"
xlim=c(100,500)
ylim=c(10,35)
dev.off
library(lattice)
library(datasets)
#mtcars displacement by factor cylinder
histogram(~disp | factor(cyl), data=mtcars,
main="Displacement by Cylinders",
xlab="Displacment (cu in)",
col="blue")
library(lattice)
library(datasets)
#mtcars displacement by factor cylinder
histogram(~disp | factor(cyl), data=mtcars,
main="Displacement by Cylinders",
xlab="Displacment (cu in)",
ylab="Percent of Total (cu in)",
col="red")
library(lattice)
library(datasets)
#mtcars displacement by factor cylinder
histogram(~disp | factor(cyl), data=mtcars,
main="Displacement by Cylinders",
xlab="Displacment",
ylab="Percent of Total",
col="red")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
#boxplot Sepal.Length by Species
bwplot(Sepal.Length ~ factor(Species) , data=iris,
xlab="Species",
col="red",
pch=16,
main=("Sepal.Length by Species"))
library(lattice)
library(datasets)
#boxplot Sepal.Length by Species
bwplot(Sepal.Length ~ factor(Species) , data=iris,
xlab="Species",
col="green",
pch=20,
main=("Sepal.Length by Species"))
library(lattice)
library(datasets)
#boxplot Sepal.Length by Species
bwplot(Sepal.Length ~ factor(Species) , data=iris,
xlab="Species",
col="red",
pch=40,
main=("Sepal.Length by Species"))
library(lattice)
library(datasets)
cloud(depth ~ lat * long, data = quakes,
zlim = rev(range(quakes$depth)),
screen = list(z = 105, x = -70),
panel.aspect = 0.75,
xlab = "Longitude",
ylab = "Latitude",
zlab = "Depth",
main="Lattice Cloud Plot",
col="red")
library(lattice)
library(datasets)
cloud(depth ~ lat * long, data = quakes,
zlim = rev(range(quakes$depth)),
screen = list(z = 200, x = -70),
panel.aspect = 0.75,
xlab = "Longitude",
ylab = "Latitude",
zlab = "Depth",
main="Lattice Cloud Plot",
col="red")
library(lattice)
library(datasets)
cloud(depth ~ lat * long, data = quakes,
zlim = rev(range(quakes$depth)),
screen = list(z = 200, x = -70),
panel.aspect = 0.8,
xlab = "Longitude",
ylab = "Latitude",
zlab = "Depth",
main="Lattice Cloud Plot",
col="red")
install.packages("ggplot2")
library(ggplot2)
head(mtcars)
ggplot(data = mtcars, aes(x = hp, y = mpg,color = factor(am), alpha = wt, size = cyl)) + geom_point() + scale_color_discrete(labels = c("Automatic", "Manual")) + labs(color = "Transmission", x = "Horsepower", y = "Miles Per Gallon", alpha = "Weight", size = "Cylinders")
ggplot(data = mtcars, aes(x = hp, y = mpg,color = factor(am), alpha = wt, size = cyl)) + geom_point() + scale_color_discrete(labels = c("Automatic", "Manual")) + labs(color = "Transmission", x = "Horsepower", y = "Miles Per Gallon", alpha = "Weight", size = "Cylinders")+theme_bw()
ggplot(data = mtcars, aes(x = hp, y = mpg,color = factor(am), alpha = wt, size = cyl)) + geom_point() + scale_color_discrete(labels = c("Automatic", "Manual")) + labs(color = "Transmission", x = "Horsepower", y = "Miles Per Gallon", alpha = "Weight", size = "Cylinders")+theme_light()
ggplot(data = mtcars, aes(x = hp, y = mpg,color = factor(am), alpha = wt, size = cyl)) + geom_point() + scale_color_discrete(labels = c("Automatic", "Manual")) + labs(color = "Transmission", x = "Horsepower", y = "Miles Per Gallon", alpha = "Weight", size = "Cylinders")+theme_minimal()
# Load the NEI & SCC data frames.
if(!exists("NEI")){
NEI <- readRDS("D:/Exploratory_Data_Analysis_Project2/summarySCC_PM25.rds")
}
if(!exists("SCC")){
SCC <- readRDS("D:/Exploratory_Data_Analysis_Project2/Source_Classification_Code.rds")
}
# Have total emissions from PM2.5 decreased in the Baltimore City, Maryland (fips == "24510") from 1999 to 2008?
# Use the base plotting system to make a plot answering this question.
subsetNEI  <- NEI[NEI$fips=="24510", ]
aggregatedTotalByYear <- aggregate(Emissions ~ year, subsetNEI, sum)
png('plot2.png')
barplot(height=aggregatedTotalByYear$Emissions, names.arg=aggregatedTotalByYear$year, xlab="years", ylab=expression('total PM'[2.5]*' emission'),main=expression('Total PM'[2.5]*' in the Baltimore City, MD emissions at various years'))
dev.off()
# Download and uncompress the data file.
if (!file.exists('FNEI_data.zip')) {
download.file(
'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip',
destfile = 'FNEI_data.zip',
method = 'curl'
)
unzip('FNEI_data.zip')
}
# Read the data files into tables.
# The first file will likely take a few seconds. Be patient!
if (!exists('NEI')) {
NEI <- readRDS("summarySCC_PM25.rds")
}
if (!exists('SCC')) {
SCC <- readRDS("Source_Classification_Code.rds")
}
# Construct the plot.
library(ggplot2)
png(filename = 'plot3.png')
qplot(
factor(year), Emissions,
data = BC,
log = 'y',
facets = type ~ .,
main = 'Emissions by Type in Baltimore City from 1999 to 2008',
xlab = 'Year',
ylab = 'Emissions (log Scale)'
) +
geom_boxplot()
dev.off()
# Download and uncompress the data file.
if (!file.exists('FNEI_data.zip')) {
download.file(
'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip',
destfile = 'FNEI_data.zip',
method = 'curl'
)
unzip('FNEI_data.zip')
}
# Read the data files into tables.
# The first file will likely take a few seconds. Be patient!
if (!exists('NEI')) {
NEI <- readRDS("summarySCC_PM25.rds")
}
if (!exists('SCC')) {
SCC <- readRDS("Source_Classification_Code.rds")
}
# Construct the plot.
library(ggplot2)
png(filename = 'plot3.png')
qplot(
factor(year), Emissions,
data = BC,
log = 'y',
facets = type ~ .,
main = 'Emissions by Type in Baltimore City from 1999 to 2008',
xlab = 'Year',
ylab = 'Emissions (log Scale)'
) +
geom_boxplot()
dev.off()
install.packages(knitr)
install.packages("knitr")
setwd("~/")
install.packages("car")
install.packages("psych")
---
library (caret)
install.packages("caret", dependencies = TRUE)
install.packages("rpart.plot")
install.packages("rpart")
installed.packages("rpart.plot")
installed.packages("rpart")
version
setwd("C:/Users/noorazah.mampu/Desktop/Practical-Machine-Learning")
